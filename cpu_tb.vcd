$date
	Thu Jul 31 13:37:09 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module cpu_tb $end
$var wire 8 ! data_out [7:0] $end
$var reg 1 " clear $end
$var reg 1 # clk $end
$scope module uut $end
$var wire 1 " clear $end
$var wire 1 # clk $end
$var wire 8 $ data_in [7:0] $end
$var wire 1 % zero_flag $end
$var wire 1 & we_ram $end
$var wire 10 ' t_state [9:0] $end
$var wire 1 ( sub_mode $end
$var wire 1 ) load_temp_reg $end
$var wire 1 * load_pc $end
$var wire 1 + load_output_reg $end
$var wire 1 , load_mdr_reg $end
$var wire 1 - load_mar $end
$var wire 1 . load_inst_reg $end
$var wire 1 / load_c_reg $end
$var wire 1 0 load_b_reg $end
$var wire 1 1 load_accum $end
$var wire 1 2 hlt_clk $end
$var wire 1 3 extended_fetch $end
$var wire 1 4 enable_ring_counter $end
$var wire 1 5 enable_pc $end
$var wire 1 6 enable_mdr_reg $end
$var wire 1 7 enable_inst_reg $end
$var wire 1 8 enable_c_reg $end
$var wire 1 9 enable_b_reg $end
$var wire 1 : enable_alu $end
$var wire 1 ; enable_accum $end
$var wire 8 < data_out [7:0] $end
$var wire 1 = count_pc $end
$var wire 8 > controller_sequencer_input [7:0] $end
$var wire 1 ? clear_pc $end
$var wire 1 @ clear_inst_reg $end
$var wire 1 A ce_ram $end
$var wire 1 B carry_flag $end
$scope module controller_sequencer $end
$var wire 1 % zero_flag $end
$var wire 10 C ring_counter [9:0] $end
$var wire 8 D instruction [7:0] $end
$var wire 1 B carry_flag $end
$var parameter 8 E ADD_B $end
$var parameter 8 F ADD_C $end
$var parameter 8 G HLT $end
$var parameter 8 H JC $end
$var parameter 8 I JMP $end
$var parameter 8 J JZ $end
$var parameter 8 K LDA $end
$var parameter 8 L MVI_ACCUM $end
$var parameter 8 M MVI_B $end
$var parameter 8 N MVI_C $end
$var parameter 8 O OUT $end
$var parameter 8 P STA $end
$var parameter 8 Q SUB_B $end
$var parameter 8 R SUB_C $end
$var reg 1 A ce_ram $end
$var reg 1 @ clear_inst_reg $end
$var reg 1 ? clear_pc $end
$var reg 1 = count_pc $end
$var reg 1 ; enable_accum $end
$var reg 1 : enable_alu $end
$var reg 1 9 enable_b_reg $end
$var reg 1 8 enable_c_reg $end
$var reg 1 7 enable_inst_reg $end
$var reg 1 6 enable_mdr_reg $end
$var reg 1 5 enable_pc $end
$var reg 1 4 enable_ring_counter $end
$var reg 1 3 extended_fetch $end
$var reg 1 2 hlt_clk $end
$var reg 1 1 load_accum $end
$var reg 1 0 load_b_reg $end
$var reg 1 / load_c_reg $end
$var reg 1 . load_inst_reg $end
$var reg 1 - load_mar $end
$var reg 1 , load_mdr_reg $end
$var reg 1 + load_output_reg $end
$var reg 1 * load_pc $end
$var reg 1 ) load_temp_reg $end
$var reg 1 ( sub_mode $end
$var reg 1 & we_ram $end
$upscope $end
$scope module datapath $end
$var wire 8 S bus [7:0] $end
$var wire 8 T bus_internal [7:0] $end
$var wire 1 A ce_ram $end
$var wire 1 " clear $end
$var wire 1 @ clear_inst_reg $end
$var wire 1 ? clear_pc $end
$var wire 1 # clk $end
$var wire 1 = count_pc $end
$var wire 8 U data_in [7:0] $end
$var wire 1 ; enable_accum $end
$var wire 1 : enable_alu $end
$var wire 1 9 enable_b_reg $end
$var wire 1 8 enable_c_reg $end
$var wire 1 V enable_input $end
$var wire 1 7 enable_inst_reg $end
$var wire 1 6 enable_mdr_reg $end
$var wire 1 5 enable_pc $end
$var wire 1 1 load_accum $end
$var wire 1 0 load_b_reg $end
$var wire 1 / load_c_reg $end
$var wire 1 . load_inst_reg $end
$var wire 1 - load_mar $end
$var wire 1 , load_mdr_reg $end
$var wire 1 + load_output_reg $end
$var wire 1 * load_pc $end
$var wire 1 ) load_temp_reg $end
$var wire 8 W mdr_reg_out [7:0] $end
$var wire 1 ( sub_mode $end
$var wire 1 & we_ram $end
$var wire 1 % zero_flag $end
$var wire 8 X temp_output [7:0] $end
$var wire 8 Y mar_output [7:0] $end
$var wire 8 Z data_out [7:0] $end
$var wire 8 [ controller_sequencer_input [7:0] $end
$var wire 1 B carry_flag $end
$var wire 8 \ c_reg_out [7:0] $end
$var wire 8 ] b_reg_out [7:0] $end
$var wire 8 ^ alu_output [7:0] $end
$var wire 8 _ accum_output [7:0] $end
$scope module accum_buffer $end
$var wire 8 ` data_out [7:0] $end
$var wire 1 ; enable $end
$var wire 8 a data_in [7:0] $end
$upscope $end
$scope module accumulator $end
$var wire 1 " clear $end
$var wire 1 # clk $end
$var wire 8 b data_in [7:0] $end
$var wire 1 1 load $end
$var reg 8 c data_out [7:0] $end
$upscope $end
$scope module alu $end
$var wire 8 d a [7:0] $end
$var wire 1 ( sub $end
$var wire 1 % zero_flag $end
$var wire 8 e sum [7:0] $end
$var wire 9 f result [8:0] $end
$var wire 1 B carry_flag $end
$var wire 8 g b [7:0] $end
$upscope $end
$scope module alu_buffer $end
$var wire 8 h data_in [7:0] $end
$var wire 8 i data_out [7:0] $end
$var wire 1 : enable $end
$upscope $end
$scope module b_reg_buffer $end
$var wire 8 j data_out [7:0] $end
$var wire 1 9 enable $end
$var wire 8 k data_in [7:0] $end
$upscope $end
$scope module b_register $end
$var wire 1 " clear $end
$var wire 1 # clk $end
$var wire 8 l data_in [7:0] $end
$var wire 1 0 load $end
$var reg 8 m data_out [7:0] $end
$upscope $end
$scope module c_reg_buffer $end
$var wire 8 n data_out [7:0] $end
$var wire 1 8 enable $end
$var wire 8 o data_in [7:0] $end
$upscope $end
$scope module c_register $end
$var wire 1 " clear $end
$var wire 1 # clk $end
$var wire 8 p data_in [7:0] $end
$var wire 1 / load $end
$var reg 8 q data_out [7:0] $end
$upscope $end
$scope module input_buffer $end
$var wire 8 r data_in [7:0] $end
$var wire 8 s data_out [7:0] $end
$var wire 1 V enable $end
$upscope $end
$scope module instruction_register $end
$var wire 1 @ clear $end
$var wire 1 # clk $end
$var wire 8 t data_in [7:0] $end
$var wire 1 . load $end
$var reg 8 u data_out [7:0] $end
$upscope $end
$scope module mar $end
$var wire 1 " clear $end
$var wire 1 # clk $end
$var wire 8 v data_in [7:0] $end
$var wire 1 - load $end
$var reg 8 w data_out [7:0] $end
$upscope $end
$scope module mdr_register $end
$var wire 8 x data_in [7:0] $end
$var wire 8 y data_out [7:0] $end
$var wire 1 6 enable $end
$upscope $end
$scope module memory $end
$var wire 8 z addr [7:0] $end
$var wire 1 A ce $end
$var wire 1 # clk $end
$var wire 8 { data_in [7:0] $end
$var wire 1 & we $end
$var reg 8 | data_out [7:0] $end
$upscope $end
$scope module memory_data_register $end
$var wire 1 " clear $end
$var wire 1 # clk $end
$var wire 8 } data_in [7:0] $end
$var wire 1 , load $end
$var reg 8 ~ data_out [7:0] $end
$upscope $end
$scope module output_register $end
$var wire 1 " clear $end
$var wire 1 # clk $end
$var wire 8 !" data_in [7:0] $end
$var wire 1 + load $end
$var reg 8 "" data_out [7:0] $end
$upscope $end
$scope module pc $end
$var wire 1 " clear $end
$var wire 1 # clk $end
$var wire 1 = count $end
$var wire 8 #" jump_address [7:0] $end
$var wire 1 * load $end
$var reg 8 $" address [7:0] $end
$upscope $end
$scope module temp_register $end
$var wire 1 " clear $end
$var wire 1 # clk $end
$var wire 8 %" data_in [7:0] $end
$var wire 1 ) load $end
$var reg 8 &" data_out [7:0] $end
$upscope $end
$upscope $end
$scope module ring_counter $end
$var wire 1 " clear $end
$var wire 1 # clk $end
$var wire 1 4 enable $end
$var wire 1 3 extended_fetch $end
$var reg 10 '" t_state [9:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b101 R
b100 Q
b1 P
b1001 O
b1101 N
b1100 M
b1011 L
b0 K
b1000 J
b110 I
b111 H
b1010 G
b11 F
b10 E
$end
#0
$dumpvars
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
b0 |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bz r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
zV
bz U
bx T
bx S
bx D
bx C
xB
xA
x@
x?
bx >
x=
bx <
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
x0
x/
x.
x-
x,
x+
x*
x)
x(
bx '
x&
x%
bz $
0#
x"
bx !
$end
#5000
1#
#10000
0#
#15000
1#
#20000
0#
#25000
1#
#30000
0#
#35000
1#
#40000
0#
#45000
1#
#50000
0#
#55000
1#
#60000
0#
#65000
1#
#70000
0#
#75000
1#
#80000
0#
#85000
1#
#90000
0#
#95000
1#
#100000
0#
#105000
1#
#110000
0#
#115000
1#
#120000
0#
#125000
1#
#130000
0#
#135000
1#
#140000
0#
#145000
1#
#150000
0#
#155000
1#
#160000
0#
#165000
1#
#170000
0#
#175000
1#
#180000
0#
#185000
1#
#190000
0#
#195000
1#
#200000
0#
#205000
1#
#210000
0#
#215000
1#
#220000
0#
#225000
1#
#230000
0#
#235000
1#
#240000
0#
#245000
1#
#250000
0#
#255000
1#
#260000
0#
#265000
1#
#270000
0#
#275000
1#
#280000
0#
#285000
1#
#290000
0#
#295000
1#
#300000
0#
